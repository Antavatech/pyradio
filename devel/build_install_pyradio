#!/usr/bin/env bash
function help(){
echo "Usage: $0 [2/-R]"
echo "
Available options:
     2   build using python v. 2.7 (linux only)
    -R   remove (uninstall) pyradio
    -t   Use this terminal for Desktop file

If no option is used, will build using Python 3
and will install in your HOME directory

Checking python availability:"

            for n in 2 3 "";do
                echo -n "  python${n}"
                [ -z "$n" ] && echo -n " "
                echo -n "   ...   "
                python${n} --version 2>/dev/null 1>&2 && {
                    python${n} --version
                } || echo not found
            done
            echo
}

function pipx_error(){
cat <<END
The installation has failed!!!
Please report this at https://github.com/coderholic/pyradio/issues

END
exit 1
}

function pip_error(){
cat <<END
Your installation is missing python's package manager (pip)
Please install it and try again...

END
exit 1
}

function find_paths(){
local APATH
# Fix for MacOs Catalina python 3
if [[ $(uname -s) = "Darwin" ]] || [[ $(uname -s) = "darwin" ]]; then
    echo /usr/local/lib
fi
python devel/site.py 2>/dev/null
python2 devel/site.py 2>/dev/null
python3 devel/site.py 2>/dev/null
APATH=$(python -m site --user-site 2>/dev/null) && echo "$APATH"
APATH=$(python2 -m site --user-site 2>/dev/null) && echo "$APATH"
APATH=$(python3 -m site --user-site 2>/dev/null) && echo "$APATH"
}

function remove_paths(){
echo "Looking for python installed files..."
find_paths | sort -u > /tmp/pyradio-uninstall.$$
while read line;do
    [ -d "$line" ] && {
    sudo find "$line" -type d -name "pyradio*egg" >> /tmp/pyradio-delete.$$
    }
done < /tmp/pyradio-uninstall.$$
while read line;do
    [ -d "$line" ] && {
        echo -n "** Removing \"$(basename $line)\" ... "
        sudo rm -rf "$line"
        echo done
    }
done < /tmp/pyradio-delete.$$
rm -f /tmp/pyradio-uninstall.$$ /tmp/pyradio-delete.$$ 2>/dev/null
}

function remove_pip_sudo_install(){
    sudo python -m pip uninstall -y pyradio 2>/dev/null 1>&2 || pip_error
    sudo python2 -m pip uninstall -y pyradio 2>/dev/null 1>&2
    sudo python3 -m pip uninstall -y pyradio 2>/dev/null 1>&2
}

function uninstall(){
    echo 'Uninstalling PyRadio'
    echo -n '  ** Removing python files ... '
    pipx list 2>/dev/null 1>&2 && PIPX=1
    if [ -z "${PIPX}" ]
    then
        python -m pip uninstall -y pyradio 2>/dev/null 1>&2 || pip_error
        python2 -m pip uninstall -y pyradio 2>/dev/null 1>&2
        python3 -m pip uninstall -y pyradio 2>/dev/null 1>&2
    else
        pipx uninstall pyradio 2>/dev/null 1>&2
    fi
    echo 'done'
    echo -n '  ** Removing help files ... '
    if [ -d ~/.local/share/doc/pyradio ];then
        rm -rf ~/.local/share/doc/pyradio 2>/dev/null
    else
        rm -rf ~/.local/local/share/doc/pyradio 2>/dev/null
    fi
    rm -f ~/.local/share/man/man1/pyradio*gz 2>/dev/null
    rm -f ~/.local/share/applications/pyradio.desktop 2>/dev/null
    echo 'done'
    if [ $(uname -s) = "Darwin" ] || [ $(uname -s) = "darwin" ];then
        # delete link on mac
        echo -n '  ** Removing link to executable ... '
        [ -h ~/bin/pyradio ] && rm ~/bin/pyradio 2>/dev/null
        echo 'done'
    fi
    echo "PyRadio successfully uninstalled"
}

function uninstall_sudo(){
    local user
    [ -z "$1" ] && {
        user=$(which pyradio 2>/dev/null) || {
            echo "PyRadio is not installed..."
            exit
        }
    }
    sudo echo 'Uninstalling PyRadio'
    echo -n '  ** Removing executable ... '
    sudo rm -f `which pyradio 2>/dev/null` 2>/dev/null
    if [ -d /usr/share/doc/pyradio ];then
        sudo rm -rf /usr/share/doc/pyradio 2>/dev/null
    else
        sudo rm -rf /usr/local/share/doc/pyradio 2>/dev/null
    fi
    echo done
    echo -n '  ** Removing help files ... '
    sudo rm -f /usr/share/man/man1/pyradio.1.gz 2>/dev/null || sudo rm -f /usr/local/share/man/man1/pyradio.1.gz 2>/dev/null
    sudo rm -f /usr/share/man/man1/pyradio_rb.1.gz 2>/dev/null || sudo rm -f /usr/local/share/man/man1/pyradio_rb.1.gz 2>/dev/null
    sudo rm -f /usr/share/man/man1/pyradio_server.1.gz 2>/dev/null || sudo rm -f /usr/local/share/man/man1/pyradio_server.1.gz 2>/dev/null
    echo done
#set -x
    remove_paths
    remove_pip_sudo_install
    if [ $(uname -s) = "Darwin" ] || [ $(uname -s) = "darwin" ];then
        # delete link on mac
        [ -h ~/bin/pyradio ] && rm ~/bin/pyradio 2>/dev/null
    fi
    echo "PyRadio successfully uninstalled"
}

function get_cur_version(){
    cur_version=$(grep 'version_info = ' pyradio/__init__.py | sed 's/version_info = (//;s/, /./g;s/)//')
    cur_state=$(grep 'app_state = ' pyradio/__init__.py | sed "s/app_state = //;s/'//g")
    [[ -z "$cur_state" ]] || cur_version="$cur_version"-"$cur_state"
    #echo "$cur_version"
}

function do_dev(){
    if [ -z "${NO_DEV}" ]
    then
        [ -z "$DEVEL" ] && {
            rm pyradio/config.pydev 2>/dev/null
            return
        }
        sed -i "s/git_description = ''/git_description = '$DEVEL'/" pyradio/config.py
    fi
}

function do_undev(){
    if [ -e pyradio/config.pydev ]
    then
        mv pyradio/config.pydev pyradio/config.py
    fi
}

function do_exit(){
    # remove instasllation directory
    if [ ! -z "$REMOVE_DIR" ];then
        if [ "$REMOVE_DIR" = "$HOME/pyradio" ] || \
                [ "$REMOVE_DIR" = "$HOME/tmp-pyradio" ] || \
                [ "$REMOVE_DIR" = "/tmp/pyradio" ] || \
                [ "$REMOVE_DIR" = "/tmp/tmp-pyradio" ];then
            rm -fr "$REMOVE_DIR"
        fi
    fi
}

function put_exec_to_mac_path(){
echo "Checking executable accessability"
echo -n "  ** Checking if pyradio is in PATH ... "
pyradio --version 1>/dev/null 2>&1
if (( $? == 0 ));then
    echo "found"
    exit
else
    echo "not found"
fi

echo -n "  ** Checking if ~/bin is in PATH ... "
BIN_IN_PATH=$(python${TO_PYTHON} -c "from os import getenv; \
find_path=getenv('HOME') + '/bin'; \
path=getenv('PATH'); \
print('nok') if not find_path in path else print('')")
#
# if BIN_IN_PATH is not empty, exit with warning!
#
[ -z ${BIN_IB_PATH} ] && echo "found" || echo "not found"

BIN_FOLDER="${HOME}"/bin
[ -d "${BIN_FOLDER}" ] || mkdir "${BIN_FOLDER}"

# find pyradio
echo -n "  ** Looking for pyradio executable ... "
#ver=$(python"${TO_PYTHON}" -c 'from sys import version_info; print("{0}.{1}.{2}".format(version_info.major, version_info.minor, version_info.micro))')
#FILE=$(find /usr/local -type f -name pyradio | grep ${ver})

#set -x
cat <<EOF > tmp_$$.py
import glob
from os.path import isfile, exists
from argparse import ArgumentParser
import subprocess
import sys
homebrew='/usr/local/opt'
parser = ArgumentParser(description='Put PyRadio in PATH on MacOsX')
parser.add_argument('--brew', default='', help='Homebrew installation path.')
args = parser.parse_args()
if args.brew:
    if exists(str(args.brew)):
        homebrew = str(args.brew)
#print('homebrew =', homebrew)
#sys.exit()
files=glob.glob(homebrew + '/**/pyradio', recursive=True)
ver = str(sys.version_info.major) + '.' + str(sys.version_info.minor)
for f in files:
    if isfile(f) and ver in f:
        #print('trying ' + f)
        ret = subprocess.call(f + ' --version', shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        #print('ret ', ret)
        if ret == 0:
            print(f)
            break
EOF
#set -x
if [ -z "${HOMEBREW_TOKEN}" ];then
    FILE=$(python${TO_PYTHON} tmp_$$.py)
else
    FILE=$(python${TO_PYTHON} tmp_$$.py "${HOMEBREW_TOKEN}" "${HOMEBREW}")
fi
rm tmp_$$.py
#set +x
#exit

#
# if FILE is empty, exeit with error, point to issues
#
[ -z ${FILE} ] && echo "not found" || echo "found"

#echo "FILE = ${FILE}"
#unset FILE
if [ -z "${FILE}" ];then
    echo ""
    echo "I cannot find pyradio executable file!"
    echo
    if [ -z ${WARNING} ];then
        echo "Try to use the --brew command line parameter"
        echo "to indicate where Hombrew (or whatever package"
        echo "manager you are using) installs files."
    else
        echo "Try to pass the location where Hombrew (or whatever"
        echo "package manager you are using) installs files, as"
        echo "a parameter and try again."
    fi
    echo ""
    echo "If you still cannot make it work, please"
    echo "fill in a bug report at"
    echo "    https://github.com/coderholic/pyradio/issues"
    echo ""
    exit 1
fi

echo -n "  ** Linking pyradio to ${BIN_FOLDER} ... "
ln -s "${FILE}" "${BIN_FOLDER}"/pyradio 2>/dev/null && echo "done" || {
    echo "error"
    echo ""
    echo "  ** Error: I cannot create a link to pyradio"
    echo "            executable file..."
    echo "  ** Please execute the following command and check"
    echo "     its status:"
    echo "ln -s "${FILE}" "${BIN_FOLDER}"/pyradio"
    echo ""
    exit 1
}

if [ ! -z "${BIN_IN_PATH}" ];then
    echo ""
    echo "  ** Error: Your bin folder (${BIN_FOLDER})"
    echo "            is not in your PATH"
    echo "  ** PyRadio has already created a link to the"
    echo "     executable file, but you will have to add"
    echo "     ${BIN_FOLDER} to your PATH variable, for"
    echo "     it to work..."
    echo ""
fi
}

rm -rf build pyradio.egg-info 2>/dev/null
TO_PYTHON=3
TO_PYTHON_FROM_X=''
NO_DEV=''
while [[ $# -gt 0 ]]
do
    key="$1"
    case $key in
        -h|--help)
            help
            exit
            ;;
        -t)
            shift
            if [ -z "$1" ];then
                echo "Error: No terminal specified..."
                echo
                exit 1
            fi
            REQ_TERMINAL="$1"
            shift
            ;;
        --warning)
            # macos only; execute "put pyradio in PATH" and
            # display warning (not error) if pyradio executable
            # is not found
            #
            # DO NOT USE IT on any other circumstance
            #
            WARNING=1
            shift
            ;;
        --brew)
            # macos only; put pyradio in PATH
            #
            # DO NOT USE IT on any other circumstance
            #
            shift
            [ -z "${1}" ] || {
                HOMEBREW_TOKEN="--brew"
                HOMEBREW="${1}"
                shift
            }
            ;;
        --fix-mac-path)
            # macos only; put pyradio in PATH (same as above)
            # but actuall run put_exec_to_mac_path (maybe from
            # install.py?)
            #
            # DO NOT USE IT on any other circumstance
            #
            shift
            #set -x
            [ -z "$1" ] ||{
                HOMEBREW_TOKEN="--brew"
                HOMEBREW="${1}"
            }
            put_exec_to_mac_path
            exit
            ;;
        --isolate|-i)
            PIPX_ISOLATE=1
            shift
            ;;
        -R)
            uninstall
            exit
            ;;
        2)
            [ -z "${TO_PYTHON_FROM_X}" ] && TO_PYTHON=2
            shift
            ;;
        -x)
            #
            # Hidden parameter; to be used by
            #     pyradio -U, -R
            # command line parameters
            #
            # DO NOT USE IT on any other circumstance
            #
            REMOVE_DIR=$(dirname "$PWD")
            shift
            TO_PYTHON=${1/python/}
            TO_PYTHON_FROM_X=1
            shift
            ;;
        -n)
            NO_DEV=1
            shift
            ;;
        *)    # unknown option
            POSITIONAL+=("$1") # save it in an array for later
            shift # past argument
            ;;
    esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

# if [ -z "$NO_DEV" ]
# then
#     cd pyradio
#     DEVEL=$(python -c 'from install import get_github_long_description_for_script; get_github_long_description_for_script()')
#     # DEVEL=$(python -c 'from install import get_devel_version; print(get_devel_version())')
#     echo "Devel version: $DEVEL"
#     cd ..
# fi


if [ $(uname -s) = "Darwin" ] || [ $(uname -s) = "darwin" ];then
python"${TO_PYTHON}" -m pip install --upgrade setuptools || pip_error
cat <<END > requirements.txt
wheel
requests
psutil
dnspython
END
else
	rm requirements.txt 2>/dev/null
fi

## check dependencies :)
#for prog in git sed ;do
#    ${prog} --version 2>/dev/null 1>&2 || {
#        echo "Error: ${prog} not found."
#        echo "       Please install it and try again."
#        exit 1
#    }
#done

# check dependencies :)
# for prog in git sed ;do
for prog in sed ;do
    ${prog} --version 2>/dev/null 1>&2 || {
        if [ "${prog}" = "sed" ];then
            sed 's/a/b/' LICENCE > /dev/null ||{
                echo "Error: ${prog} not found."
                echo "       Please install it and try again."
                exit 1
            }
        else
                echo "Error: ${prog} not found."
                echo "       Please install it and try again."
                exit 1
        fi
    }
done

# uninstall previous versions
# uninstall 1

# # delete any files that were left from previous attempt
# sudo find . -iname "*.pyc" -delete 2>/dev/null
# sudo find . -iname "*.egg" -delete 2>/dev/null

# echo "***** installing for user..."
do_dev

if [ "${TO_PYTHON}" == "2" ];
then
    tar czf pyradio.tar.gz pyradio
    for a_file in pyradio/*.py
    do
        sed -i "/open/s/, encoding='utf-8'//" "${a_file}"
        sed -i 's/console.print/# &/' "${a_file}"
        sed -i 's/from rich import print/# &/' "${a_file}"
        sed -i '/##### NO PYTHON2/,/##### END NO PYTHON2/d' "${a_file}"
    done
fi

# Use pipx by default, if installed
pipx list 2>/dev/null 1>&2 && PIPX=1

# Make an editable installation if
#       ~/.pyradio-editable
# exists
test -e ~/.pyradio-editable && PIPX_EDITABLE="-e"

if [ -z "$PIPX" ]
then
    # Normanl, old style installation
	if [ -e requirements.txt ]
    then
		python"${TO_PYTHON}" -m pip install -r requirements.txt . || pip_error
	else
		python"${TO_PYTHON}" -m pip install . || pip_error
	fi
else
    # pipx installation
    if [ -z "$PIPX_ISOLATE" ]
    then
        pipx install $PIPX_EDITABLE --system-site-packages --force . || pipx_error
    else
        pipx install $PIPX_EDITABLE --force . || pipx_error
        pipx inject pyradio \
            rich \
            requests \
            dnspython \
            psutil \
            netifaces \
            python-dateutil
    fi
fi

if [ "${TO_PYTHON}" == "2" ];
then
    tar xzf pyradio.tar.gz
    rm pyradio.tar.gz
fi

do_undev

if [ $? -eq 0 ]
then
    [ -z "${NO_DEV}" ] && [ -e pyradio/config.py.dev ] && mv pyradio/config.py.dev pyradio/config.py
    gzip -k pyradio.1
    gzip -k pyradio_rb.1
    gzip -k pyradio_server.1
    mkdir -p ~/.local/share/man/man1 2>/dev/null
    mv -f pyradio.1.gz ~/.local/share/man/man1 2>/dev/null || mv -f pyradio.1.gz ~/.local/local/share/man/man1
    mv -f pyradio_rb.1.gz ~/.local/share/man/man1 2>/dev/null || mv -f pyradio_rb.1.gz ~/.local/local/share/man/man1
    mv -f pyradio_server.1.gz ~/.local/share/man/man1 2>/dev/null || mv -f pyradio_server.1.gz ~/.local/local/share/man/man1
    DOC=~/.local/share/doc/pyradio
    mkdir -p "$DOC" 2>/dev/null
    if [ ! -d "$DOC" ];then
        # Mac OS SIP protects /usr
        DOC=~/.local/local/share/doc/pyradio
        mkdir "$DOC"
    fi
    for n in *.md *.html
    do
        cp "$n" "$DOC"
    done
    # copy LICENCE
    mkdir -p ~/.local/share/licenses 2>/dev/null
    if [ "$DOC" = "~/.local/share/doc/pyradio" ];then
        mkdir -p ~/.local/share/licenses/pyradio 2>/dev/null
        cp LICENCE ~/.local/share/licenses/pyradio
    else
        cp LICENCE "$DOC"
    fi
    if [ $(uname -s) = "Darwin" ] || [ $(uname -s) = "darwin" ];then
        [ -z "${HOMEBREW}" ] && HOMEBREW=/usr/local/opt
        put_exec_to_mac_path "${HOMEBREW}"
    else
        if [ ! -z "$(grep 'distro = None' pyradio/config)" ];then
           if [ ! -e ~/.local/share/applications/pyradio.desktop ]
           then
               mkdir -p ~/.local/share/applications/ 2>/dev/null
               cp devel/pyradio.desktop ~/.local/share/applications/pyradio.desktop
           fi
            chmod +x ./devel/fix_pyradio_desktop_file
            if [ -z "${REQ_TERMINAL}" ];then
                ./devel/fix_pyradio_desktop_file -i
            else
                ./devel/fix_pyradio_desktop_file -i -t "${REQ_TERMINAL}"
            fi
        fi
    fi
    mkdir -p ~/.config/pyradio/data
    cp devel/pyradio.png ~/.config/pyradio/data
else
    do_exit
    exit 1
fi

do_exit
exit 0
